;------------------
REGBASE_IO                equ 4000000h
REG_DMA3_SAD              equ 0D4h
REG_DMA3_DAD              equ 0D8h
REG_DMA3_CNT              equ 0DCh
REG_DMA3_FILL             equ 0ECh
;---
REGBASE_SCFG              equ 4004000h
REG_SCFG_ROM              equ 000h
REG_SCFG_CLK7             equ 004h
REG_SCFG_CLK9             equ 004h
REG_SCFG_EXT7             equ 008h
REG_SCFG_EXT9             equ 008h
;---
REGBASE_NDMA              equ 4004100h
;---
REGBASE_SDIO              equ 4004A00h
REG_SDIO_CMD              equ 000h
REG_SDIO_CARD_PORT_SELECT equ 002h
REG_SDIO_CMD_PARAM        equ 004h
REG_SDIO_STOP_INTERNAL    equ 008h
REG_SDIO_NUMBLK16         equ 00Ah
REG_SDIO_REPLY            equ 00Ch
REG_SDIO_IRQ_STAT         equ 01Ch
REG_SDIO_CARD_CLK_CTL     equ 024h
REG_SDIO_BLKLEN16         equ 026h
REG_SDIO_CARD_OPTION      equ 028h
REG_SDIO_DATA16           equ 030h
REG_SDIO_CARD_IRQ_ENABLE  equ 034h
REG_SDIO_CARD_IRQ_STAT    equ 036h
REG_SDIO_CARD_IRQ_DISABLE equ 038h
REG_SDIO_DATA_CTL         equ 0D8h
REG_SDIO_SOFT_RESET       equ 0E0h
REG_SDIO_IRQ32            equ 100h
REG_SDIO_BLKLEN32         equ 104h
REG_SDIO_NUMBLK32         equ 108h
REG_SDIO_DATA32           equ 10Ch
;---
REGBASE_GPIO              equ 4004C00h
REG_GPIO_WIFI             equ 004h
;------------------
sdio_atheros_init:
 push lr
 .if verbose_wifi_firmware
   bl   get_restart_timer         ;-
   mov  r0,chr_cls                ;\
   call wrchr_r0                  ;/
   mov  r0,chr_gif                ;\ATHEROS: request text+gif layer enable
   bl   wrchr_r0                  ;/
 .endif
;- - -
 ldr  r0,=1FDh                    ;src  ;\
 ldr  r1,=twlcfg_etc_buf+1E0h     ;dst  ; load SPI bus FLASH wifi board version
 mov  r2,1                        ;len  ;
 bl   arm7_readFirmware                 ;/
;- - -
 bl   sdio_controller_init                              ;-init controller
 bl   sdio_init_opcond_if_needed                        ;\init device
 mov  r8,r0  ;need_upload                               ;/
 bl   sdio_init_func0                                   ;-init func0
 movs r0,r8  ;skip below when already NEEDING upload    ;\
 bleq sdio_check_host_interest                          ; check RAM
 mov  r8,r0  ;need_upload (if it got set by above)      ;/
 bl   sdio_reset                                        ;-reset
 .if with_wifi_firmware_loading
   cmp  r8,0   ;need_upload                             ;\load firmware
   blne sdio_load_firmware                              ;/
 .endif
 bl   sdio_bmi_init                                     ;-BMI init
 .if with_wifi_firmware_loading
   cmp  r8,0   ;need_upload                             ;\BMI upload
   blne sdio_bmi_upload_firmware                        ;/
 .endif
 bl   sdio_bmi_finish                                   ;-BMI finish
 bl   sdio_get_eeprom_stuff                             ;-get EEPROM
 bl   sdio_whatever_handshake                           ;-handshake
;- - -
 .if with_wifi_firmware_loading
   ldr  r0,=sdio_wmi_7th_cmd              ;\WMI 7th command (WMI_SET_SCAN_PARAMS_CMD)
   bl   sdio_send_mbox_block              ;/
   ;- - -
   ldr r1,=418h // mov r0,00000000h // bl sdio_write_func1word  ;-INT_STATUS_ENABLE (all back off)
   bl   sdio_check_mbox_state                                   ;-check (but get nothing)
   ldr r1,=400h // ldr r0,=0040001h // bl sdio_write_func1word  ;-[1:00400]=00040001h    ;.......... (ack above read check_state [400h] value?)
   bl   sdio_recv_mbox_block                                    ;-RECV (handshake)
   bl   sdio_check_mbox_state                                   ;-check (but get nothing)
   ldr r1,=400h // mov r0,00040000h // bl sdio_write_func1word  ;-[1:00400]=00040000h    ;.......... (ack above read check_state [400h] value?)
   mov r1,0004h // mov r0,000h // bl sdio_write_func0byte       ;-CCCR interrupt_enable (disable)
 .endif
;- - -
 .if verbose_wifi_firmware
  ldr  r1,=txt_wifi_done                ;\
  bl   wrstr_r1                         ;/
  bl   show_timer                       ;-
  bl   flushkey_waitkey
 .endif
 pop  pc
;------------------
const_00000002h dd 00000002h
const_00000080h dd 00000080h
const_00000063h dd 00000063h
;---
sdio_mbox_1st_handshake db 0,0,08h,0,0,0,2,0, 0,1,0,0,0,0    ;send cmd_2_2_1      ;WMI_CONTROL ?            ;\
sdio_mbox_2nd_handshake db 0,0,08h,0,0,0,2,0, 1,1,5,0,0,0    ;send cmd_2_2_1_1_5  ;WMI_DATA_BE best effort? ;
sdio_mbox_3rd_handshake db 0,0,08h,0,0,0,2,0, 2,1,5,0,0,0    ;send cmd_2_2_2_1_5  ;WMI_DATA_BK background?  ; named so in launcher
sdio_mbox_4th_handshake db 0,0,08h,0,0,0,2,0, 3,1,5,0,0,0    ;send cmd_2_2_3_1_5  ;WMI_DATA_VI video?       ;
sdio_mbox_5th_handshake db 0,0,08h,0,0,0,2,0, 4,1,5,0,0,0    ;send cmd_2_2_4_1_5  ;WMI_DATA_VO voice?       ;/
sdio_mbox_6th_handshake db 0,0,02h,0,0,0,4,0                 ;send cmd_4
sdio_wmi_7th_cmd        db 1,1,16h,0,0,0,8,0, 0ffh,0ffh,0ffh,0ffh, 0ffh,0ffh,14h,0, 32h,0,3,0, 0,0,0,0, 0,0,0,0 ;send cmd_1_1_16_8_xxx (!) WMI_SET_SCAN_PARAMS_CMD
.align 4
;------------------
sdio_controller_init:
 push lr
 .if with_rtc_init
                ;REQUIRED for sdio/wifi after BATTERY REMOVAL
                 bl   nds7_rtc_select           ;-begin
                 mov  r0,48h+06h ;write+idcode  ;\send write command, index, idcode
                 bl   nds7_rtc_send_byte_r0     ;/     FOUT register setting 1
                 mov  r0,80h                    ;\data block
                 bl   nds7_rtc_send_byte_r0     ;/
                 bl   nds7_rtc_deselect         ;-finish
                ;- - -
                 bl   nds7_rtc_select           ;-begin
                 mov  r0,28h+06h ;write+idcode  ;\send write command, index, idcode
                 bl   nds7_rtc_send_byte_r0     ;/     FOUT register setting 2
                 mov  r0,00h                    ;\data block
                 bl   nds7_rtc_send_byte_r0     ;/
                 bl   nds7_rtc_deselect         ;-finish
 .endif
 ;- - -
 ldr  r9,=REGBASE_SDIO
 ;---part1
 ldrh r0,[r9,REG_SDIO_SOFT_RESET]       ;\
 bic  r0,3                              ; SDIO_SOFT_RESET clear bit0-1
 strh r0,[r9,REG_SDIO_SOFT_RESET]       ;/
 ldrh r0,[r9,REG_SDIO_SOFT_RESET]       ;\
 orr  r0,3                              ; SDIO_SOFT_RESET set bit0-1
 strh r0,[r9,REG_SDIO_SOFT_RESET]       ;/
 ldrh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;\
        ORR r0,100h  ;<-- bit8 needed for SDIO with multiblock !!!
 bic  r0,1                              ; SDIO_STOP_INTERNAL clear bit0
 strh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;/

;mov  r0,N/A                            ;\SDIO_CARD_PORT_SELECT (uninit by firmware?)
;strh r0,[r9,REG_SDIO_CARD_PORT_SELECT] ;/

 ldr  r0,=80d0h                         ;\SDIO_CARD_OPTION = 80D0h
 strh r0,[r9,REG_SDIO_CARD_OPTION]      ;/
 ;---part2a
 mov  r0,0040h                          ;\SDIO_CARD_CLK_CTL = 0040h
 strh r0,[r9,REG_SDIO_CARD_CLK_CTL]     ;/
 ldrh r0,[r9,REG_SDIO_CARD_OPTION]      ;\
 orr  r0,8000h                          ; SDIO_CARD_OPTION set bit15
   bic r0,8000h                         ;   clear --> want 4bit DATA mode !!!
 strh r0,[r9,REG_SDIO_CARD_OPTION]      ;/
 ;---part2b
 ldrh r0,[r9,REG_SDIO_CARD_OPTION]      ;\
 orr  r0,0100h                          ; SDIO_CARD_OPTION set bit8
 strh r0,[r9,REG_SDIO_CARD_OPTION]      ;/
 ldrh r0,[r9,REG_SDIO_CARD_OPTION]      ;\
 bic  r0,0100h                          ; SDIO_CARD_OPTION clear bit8
 strh r0,[r9,REG_SDIO_CARD_OPTION]      ;/
 ;---part3a
 mov  r0,0100h                          ;\SDIO_CARD_CLK_CTL set bit8
 strh r0,[r9,REG_SDIO_CARD_CLK_CTL]     ;/
 ;- - -
 .if try_sdio_data32_mode
      mov  r0,002h                           ;\want DATA32 mode, step 1
      strh r0,[r9,REG_SDIO_DATA_CTL]         ;/
      ldr  r0,=402h ;clear fifo, data32 mode ;\want DATA32 mode, step 2
      str  r0,[r9,REG_SDIO_IRQ32]            ;/
 .endif
 ;- - -

        .if wifi_with_dsi_irq
         ldrh r0,[r9,REG_SDIO_CARD_IRQ_STAT]             ;-read irq stat
         ldrh r0,[r9,REG_SDIO_CARD_IRQ_DISABLE]          ;\
         bic  r0,1  ;Card (RQ                            ; irq disable=off
         strh r0,[r9,REG_SDIO_CARD_IRQ_DISABLE]          ;/
         ldrh r0,[r9,REG_SDIO_CARD_IRQ_ENABLE]           ;\
         orr  r0,1  ;Card (RQ                            ; irq enable=on
         strh r0,[r9,REG_SDIO_CARD_IRQ_ENABLE]           ;/
        .endif

 ;- - -
 ldr  r1,=REGBASE_GPIO          ;\
 ldrh r0,[r1,REG_GPIO_WIFI]     ; GPIO_WIFI
 bic  r0,100h                   ; <--- NEEDED for DWM-W024 in SDIO mode (else SDIO.func1 fails?!!)
 strh r0,[r1,REG_GPIO_WIFI]     ;/
 ;- - -
 mov  r1,30h // mov  r0,13h //  bl set_bptwl_reg_r1_to_r0  ;-required for SDIO!
 pop  pc
;------------------
sdio_init_opcond_if_needed:
 push r4-r12,lr
 mov  r1,0004h // bl sdio_read_func0byte  ;bl wrhex8bit ;-read interrupt_enable
 ldr  r9,=REGBASE_SDIO
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]  ;STAT (fail=20C00631h) ;\check if passed okay,
 ands r0,400000h  ;timeout   ;\out: r0=need_upload=0    ; if so, skip cmd5 etc.
 beq  @@skip_opcond_rca      ;/                         ;/
;- - - if above failed: issue CMD5 ...
 .if verbose_wifi_firmware
   ldr  r1,=txt_init_wifi_op_cond         ;\
   bl   wrstr_r1                          ;/
 .endif
mov  r8,1   ;need_upload
 mov  r0,00000000h  ;initially no known voltages        ;\
@@retry_cmd5:  ;in: r0=supported voltages               ;
 and  r0,00100000h  ;bit20: 3.2V..3.3V                  ;
 bl   sdio_cmd5  ;in: r0=param --> reply=10FFFF00h      ; CMD5
;ldr  r9,=REGBASE_SDIO                                  ;
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]  ;STAT (fail=20C00631h) ;
 tst  r0,400000h  ;timeout (can occur on W024+CMD5 ?!!) ;
 movne r0,0                                             ;
 bne  @@retry_cmd5 ;in: r0                              ;
 ldr  r0,[r9,REG_SDIO_REPLY]    ;SDIO_REPLY             ;
 tst  r0,80000000h ;ready-bit (CMD5 not yet applied)    ;
 beq  @@retry_cmd5 ;in: r0                              ;/
 mov  r0,0                                              ;\
 bl   sdio_cmd3  ;in: r0=param --> reply=00014000h      ; CMD3
;ldr  r9,=REGBASE_SDIO                                  ;
 ldr  r0,[r9,REG_SDIO_REPLY]    ;SDIO_REPLY             ;
 mov  r0,r0,lsr 16  ;isolate RCA                        ;/
 mov  r0,r0,lsl 16  ;move RCA to MSBs                   ;\CMD7
 bl   sdio_cmd7  ;in: r0=param --> reply=00001E00h      ;/
 mov  r0,1              ;need_upload=1
@@skip_opcond_rca:
 pop  r4-r12,pc     ;out: r0=need_upload
;------------------
sdio_init_func0:
 push lr
;mov r1,0000h // bl sdio_read_func0byte // bl wrhex8bit ;-version_lo
 mov r1,0012h // mov r0,002h // bl sdio_write_func0byte ;-cccr power control
 mov r1,0007h // mov r0,082h // bl sdio_write_func0byte ;-cccr bus interface (set 4bit mode)
 mov r1,0008h // mov r0,017h // bl sdio_write_func0byte ;-cccr card capability (set ...)
 mov r1,0110h // mov r0,80h  // bl sdio_write_func0byte ;-fbr1 block size.lsb
 ldr r1,=111h // mov r0,00h  // bl sdio_write_func0byte ;-fbr1 block size.msb
 mov r1,0002h // mov r0,002h // bl sdio_write_func0byte ;-function enable
@@wait_func1ready_lop:                                  ;\
 mov r1,0003h // bl sdio_read_func0byte // cmp r0,02h   ; function ready
 bne  @@wait_func1ready_lop                             ;/
 ldr r1,=418h // mov r0,0 // bl sdio_write_func1word    ;-func1 interrupt_enable
 ldr r1,=000040ech // bl sdio_read_intern_word          ;\intern chip_id
 ldr r1,=sdio_chip_id                                   ; (02000001h=AR6002)
 str r0,[r1]                                            ; (0D000000h=AR6013)
 .if verbose_wifi_firmware                              ;
  ldr r1,=txt_wifi_chip_id                              ;
  bl  wrstr_and_hex32bit_and_crlf                       ;
 .endif                                                 ;/
 pop  pc
;------------------
sdio_check_host_interest:
 push lr
 ldr  r0,=0FFFFh   ;initial             ;\
 ldr  r1,=twlcfg_etc_buf+1E4h ;addr     ;
 mov  r2,0ch       ;len                 ;
 swi  swi_crc16 shl 16                  ;
 ldr  r1,=twlcfg_etc_buf+1E0h ;addr     ; check CRC16
 ldrh r1,[r1,02h]  ;[buf+1E2h]=crc      ;
 cmp  r1,r0  ;crc16                     ;
 movne r0,1   ;need_upload ;\bad crc    ;
 bne   @@skip_vars_check   ;/out: r0    ;/
;- - -
;okay, RAM contains addr of host interest (aka vars), so check that...
;- - -
 bl   sdio_vars              ;\         ;\
 add  r1,58h                 ;          ; check HOST_RAM[58h]
 bl   sdio_read_intern_word  ;/         ;  (00000001h=already uploaded)
 cmp  r0,1    ;check if already loaded  ;  (or garbage on power-up!!!)
 moveq r0,0   ;need_upload=0 (okay)     ;
 movne r0,1   ;need_upload=1 (bad)      ;/
@@skip_vars_check:
 pop  pc        ;out: r0=need_upload
;------------------
sdio_reset:
 push lr
;cmp  xx                   ;\skip RESET when... what? (or NEVER skip?)
;bxx  @@skip_reset         ;/
 mov  r1,4000h     ;RESET_CONTROL       ;\
 mov  r0,00000100h ;bit8: 1=reset       ; issue reset (bit8: 1=reset, or 0=no change)
 bl   sdio_write_intern_word            ;/
 mov  r0,10000h                         ;\wait (NEED that delay here!)
 swi  swi_wait_by_loop                  ;/
 ldr  r1,=40c0h    ;RESET_CAUSE         ;\
 bl   sdio_read_intern_word             ; get reset_cause (00000002h)
 .if verbose_wifi_firmware              ;
   ldr  r1,=txt_wifi_reset_cause        ;
   bl   wrstr_and_hex32bit_and_crlf     ;
 .endif                                 ;/
@@skip_reset:
 pop  pc
;------------------
.if with_wifi_firmware_loading
  sdio_load_firmware:
   push lr
   .if verbose_wifi_firmware                      ;\
     ldr  r1,=txt_loading_wifi_firmware   ;\      ;
     bl   wrstr_r1                        ;/      ;
   .endif                                         ;
   bl   load_wifi_firmware                ;-      ;/
   bl   sdio_search_chip_version                  ;-
   pop  pc
.endif
;------------------
sdio_bmi_init:
 push lr
 bl  sdio_bmi_8_get_version             ;\
 ldr r1,=sdio_rom_version               ; BMI get version
 str r0,[r1]                            ;
 .if verbose_wifi_firmware              ;
   ldr r1,=txt_wifi_rom_version         ;
   bl  wrstr_and_hex32bit_and_crlf      ;
 .endif                                 ;/
;- - -
 ldr  r0,=const_00000002h      ;src     ;\
 bl   sdio_vars  ;//add r1,00h ;dst     ; BMI write memory
 mov  r2,4                     ;len     ; [500400h] = 00000002h ;HOST_RAM[00h]=2
 bl   sdio_bmi_3_write_memory           ;/
 ldr  r0,=0180C0h                       ;\
 bl   sdio_bmi_6_read_register          ; BMI read register
 ldr  r1,=sdio_old_local_scratch0       ; 00000000h = [0180C0h] ;LOCAL_SCRATCH[0]
 str  r0,[r1]                      ;\   ;/
 orr  r1,r0,8                      ;/   ;\BMI write register
 ldr  r0,=0180C0h                       ; [0180C0h] = 00000008h ;LOCAL_SCRATCH[0]
 bl   sdio_bmi_7_write_register         ;/
 ldr  r0,=0040C4h                       ;\
 bl   sdio_bmi_6_read_register          ; BMI read register
 ldr  r1,=sdio_old_wlan_system_sleep    ; 0000001Dh = [0040C4h] ;WLAN_SYSTEM_SLEEP
 str  r0,[r1]                      ;\   ;/   ;XXX browser on ar6013 reads 0Dh (not 1Dh)
 orr  r1,r0,1                      ;/   ;\BMI write register
 ldr  r0,=0040C4h                       ; [0040C4h] = 0000001Dh ;WLAN_SYSTEM_SLEEP
 bl   sdio_bmi_7_write_register         ;/
 mov  r1,00000005h                      ;\BMI write register
 ldr  r0,=004028h                       ; [004028h] = 00000005h ;-WLAN_CLOCK_CONTROL
 bl   sdio_bmi_7_write_register         ;/
 mov  r1,00000000h                      ;\BMI write register
 ldr  r0,=004020h                       ; [004020h] = 00000000h ;-WLAN_CPU_CLOCK
 bl   sdio_bmi_7_write_register         ;/
 pop  pc
;------------------
.if with_wifi_firmware_loading
  sdio_bmi_upload_firmware:
   push lr
   .if verbose_wifi_firmware
     ldr  r1,=txt_uploading_wifi_stub     ;\
     bl   wrstr_r1                        ;/
   .endif
   mov  r0,3                              ;\
   bl   sdio_get_firmware_part            ; upload stub/data (part d)  ;[502400h] = 30h bytes
   bl   sdio_bmi_3_write_memory           ;/
   mov  r0,2                              ;\
   bl   sdio_get_firmware_part            ; upload stub/code (part c)  ;[515000h] = 1F4h+EAh bytes
   bl   sdio_bmi_3_write_memory           ;/
   mov  r0,2                              ;\
   bl   sdio_get_firmware_part            ; execute [915000h] (aka CODE addr for 515000h)
   add  r0,r1,400000h  ;CODE addr         ;
   bl   sdio_bmi_4_execute                ;/
  ;- - -
   .if verbose_wifi_firmware
    ldr  r1,=txt_uploading_wifi_main      ;\
    bl   wrstr_r1                         ;/
   .endif
  .if with_manual_wifi_decompress
      mov  r0,0                              ;\
      bl   sdio_get_firmware_part            ; lz_start (502400h) (part a)
      mov  r0,r1  ;dst  ;502400h             ;
      bl   sdio_bmi_D_lz_start               ;/
      mov  r0,0                              ;\
            mov r2,2  ;XXX dummy len
      bl   sdio_get_firmware_part            ; lz_data, send (1F8h+8h)*N+58h bytes
      bl   sdio_bmi_E_lz_data                ;/

   mov  r0,0                              ;\
   bl   sdio_get_firmware_part            ; decompress/upload main (part a)
   bl   manual_lz_decode
       mov  r0,0                              ;\lz_start (0) blah
       bl   sdio_bmi_D_lz_start               ;/

  .else
         ;bl show_timer
   mov  r0,0                              ;\
   bl   sdio_get_firmware_part            ; lz_start (502400h) (part a)
   mov  r0,r1  ;dst  ;502400h             ;
   bl   sdio_bmi_D_lz_start               ;/
   bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero (extra after above FIRST call to bmi_D ?)
   mov  r0,0                              ;\
   bl   sdio_get_firmware_part            ; lz_data, send (1F8h+8h)*N+58h bytes
   bl   sdio_bmi_E_lz_data                ;/
  ;mov  r0,0                              ;\lz_start (0) blah
  ;bl   sdio_bmi_D_lz_start               ;/
         ;bl show_timer
          ;W015: 354ms
          ;W024: 32ms
  .endif
   mov  r0,3                              ;\
   bl   sdio_get_firmware_part            ; upload stub/data (part d)  ;[502400h] = 30h bytes  ;again ???
   bl   sdio_bmi_3_write_memory           ;/
   mov  r0,1                              ;\
   bl   sdio_get_firmware_part            ; upload database  (part b)  ;[52D944h] = 1F4h+C8h bytes
   ldr  r3,=sdio_database_addr ;\memorize ;
   str  r1,[r3]                ;/         ;
   bl   sdio_bmi_3_write_memory           ;/
   bl   sdio_vars // add r1,18h ;=500418h ;\
   ldr  r0,=sdio_database_addr  ;src      ; [500418h] = [src]=0052D944h
  ;;;BUG:  ldr  r0,[r0]  ;<--- ARGH, this indirection was wrong... and took 3-4 day to figure out why it didn't work
   mov  r2,4                    ;len      ;
   bl   sdio_bmi_3_write_memory           ;/
   pop  pc
.endif
;------------------
sdio_bmi_finish:
 push lr
 ldr  r1,=sdio_old_wlan_system_sleep    ;\
 ldr  r1,[r1]                           ; [0040C4h] = 0000001Ch ;-WLAN_SYSTEM_SLEEP
 bic  r1,1                              ;    ;XXX browser on ar6013 has old=0Dh (not 1Dh)
 ldr  r0,=0040C4h                       ;    ;    and so, writes 0Ch (not 1Ch)
 bl   sdio_bmi_7_write_register         ;/
 ldr  r1,=sdio_old_local_scratch0       ;\
 ldr  r1,[r1]                           ; [0180C0h] = 00000000h ;-LOCAL_SCRATCH[0]
 ldr  r0,=0180C0h                       ;
 bl   sdio_bmi_7_write_register         ;/
 ldr  r0,=const_00000080h               ;\
 bl   sdio_vars // add r1,6Ch           ; [50046Ch] = 00000080h ;-HOST_RAM[6Ch] hi_mbox_io_block_sz
 mov  r2,4                              ;
 bl   sdio_bmi_3_write_memory           ;/
 ldr  r0,=const_00000063h               ;\
 bl   sdio_vars // add r1,74h           ; [500474h] = 00000063h ;-HOST_RAM[74h] hi_mbox_isr_yield_limit
 mov  r2,4                              ;
 bl   sdio_bmi_3_write_memory           ;/
 .if verbose_wifi_firmware
   ldr  r1,=txt_starting_wifi_main      ;\
   bl   wrstr_r1                        ;/
 .endif
 bl   sdio_bmi_1_done                   ;-done, launch firmware !!!!!!
@@wait_for_firmware_init_done:          ;\
 bl   sdio_vars // add r1,58h   ;src    ; wait until launched/ready
 bl   sdio_read_intern_word             ; 0000000xh = [500458h]
 cmp  r0,1                              ; (wait until changing from 0 to 1)
 bne  @@wait_for_firmware_init_done     ;/
 pop  pc
;------------------
sdio_get_eeprom_stuff:
 push lr
 bl   sdio_vars // add r1,54h           ;\
 bl   sdio_read_intern_word             ; get EEPROM address ;HOST_RAM[54h]
 ldr  r1,=sdio_eeprom_addr              ;
 str  r0,[r1]                           ;/
 ldr  r1,=sdio_eeprom_addr              ;\
 ldr  r1,[r1]                           ;
;add  r1,00h                            ; get EEPROM[000h] (300h, size maybe?)
 bl   sdio_read_intern_word             ;
;str  XXX ?                             ;/
 ldr  r1,=sdio_eeprom_addr              ;\
 ldr  r1,[r1]                           ;
 add  r1,10h                            ; get EEPROM[010h] (version or so)
 bl   sdio_read_intern_word             ;
;str  XXX ?                             ;
 .if verbose_wifi_firmware              ;
   ldr r1,=txt_wifi_eeprom_version      ;
   bl  wrstr_and_hex32bit_and_crlf      ;
 .endif                                 ;/
 pop  pc
;------------------
sdio_whatever_handshake:
 push lr
 .if verbose_wifi_firmware
   ldr  r1,=txt_sending_wifi_handshake  ;\
   bl   wrstr_r1                        ;/
 .endif
 bl   sdio_recv_mbox_block              ;\                    ;HTC_MSG_READY_ID
 ldr  r0,=sdio_mbox_1st_handshake       ; MBOX 1st handshake  ;WMI_CONTROL
 bl   sdio_send_mbox_block              ;/
 bl   sdio_recv_mbox_block              ;\
 ldr  r0,=sdio_mbox_2nd_handshake       ; MBOX 2nd handshake  ;WMI_DATA_BE best effort
 bl   sdio_send_mbox_block              ;/
 bl   sdio_recv_mbox_block              ;\
 ldr  r0,=sdio_mbox_3rd_handshake       ; MBOX 3rd handshake  ;WMI_DATA_BK background
 bl   sdio_send_mbox_block              ;/
 bl   sdio_recv_mbox_block              ;\
 ldr  r0,=sdio_mbox_4th_handshake       ; MBOX 4th handshake  ;WMI_DATA_VI video
 bl   sdio_send_mbox_block              ;/
 bl   sdio_recv_mbox_block              ;\
 ldr  r0,=sdio_mbox_5th_handshake       ; MBOX 5th handshake  ;WMI_DATA_CO voice
 bl   sdio_send_mbox_block              ;/
 bl   sdio_recv_mbox_block              ;\
 ldr  r0,=sdio_mbox_6th_handshake       ; MBOX 6th handshake  ;?
 bl   sdio_send_mbox_block              ;/
 ;- - -
 ldr  r1,=418h   ;INT_STATUS_ENABLE     ;\
 ldr  r0,=010300D1h                     ; enable IRQs
         mov r0,1  ;bit0=MBOX0notemptyIRQ            ;XXXXXXXX
 bl   sdio_write_func1word              ;/
 mov  r1,0004h   ;CCCR irq_enable       ;\
 mov  r0,003h    ;master+func1          ; CCCR interrupt_enable (enable master & func1 interrupts)
 bl   sdio_write_func0byte              ;/
@@wait_func_irq_lop:                    ;\
 mov  r1,0005h   ;CCCR irq_flags        ; wait for
 bl   sdio_read_func0byte               ; CCCR interrupt_flags   ;XXX wait for CardIRQ to occur via IF2 and [4A36h]
 tst  r0,02h                            ;
 beq  @@wait_func_irq_lop               ;/
 .if with_wifi_firmware_loading
   ;these are normally processed/flushed by firmware uploader
   ;however, outside of firmware, they can be processed later on
   ;(ie. then processed by the event handler in wifiboot)
   bl   sdio_recv_mbox_block            ;-RECV (1001h: WMI_READY_EVENT)
   bl   sdio_recv_mbox_block            ;-RECV (1006h: WMI_REGDOMAIN_EVENT) ;aka REG_DOMAIN
   bl   sdio_check_mbox_state           ;-check (but get nothing)
 .endif
 bl   sdio_vars                         ;\
;add  r1,00h                            ; get 00507470h = [500400h]  ;HOST_RAM[00h]
 bl   sdio_read_intern_word      ;\     ;/
 mov  r1,r0  ;addr=507470h       ;/     ;\
 mov  r0,2   ;data=2                    ; set [507470h] = 00000002h  ;RAM
 bl   sdio_write_intern_word            ;/
 pop  pc
;------------------
sdio_check_mbox_state:
 push lr
 ldr  r0,=sdio_xfer_buf ;dst (temp buf) ;\
 ldr  r1,=10000400h     ;src (state)    ;
 mov  r2,0ch            ;len            ;
 bl   sdio_cmd53_read                   ;/  ;in: r0=dst(mem), r1=src(io), r2=len

.comment
   ldr  r1,=sdio_xfer_buf
   mov  r2,0ch
  @@lop:
   tst  r2,3
   bleq wrspc
   ldrb r0,[r1],1
   bl   wrhex8bit
   subs r2,1
   bne  @@lop
   bl   wrcrlf
.comment

 pop  pc
;------------------
sdio_recv_mbox_block:
 push r4,lr
;mov  r4,100h  ;timeout <-- TOO small for W024 \
 mov  r4,1000h ;timeout <-- ok for W024 ;\
@@wait_lop:                             ;
 subs r4,1     ;timeout                 ;
 beq  @@timeout                         ;
 bl   sdio_check_mbox_state             ;
 ldr  r0,=sdio_xfer_buf                 ; wait if mbox empty
 ldrb r0,[r0]                           ;
 tst  r0,1     ;test mbox0 not empty    ;
 beq  @@wait_lop                        ;/
 ldr  r0,=sdio_xfer_buf ;dst (temp buf) ;\
 ldr  r1,=18001000h-80h ;src (mbox/blk) ; receive mbox block
 mov  r2,1              ;len (1 blk)    ;
 bl   sdio_cmd53_read                   ;/  ;in: r0=dst(mem), r1=src(io), r2=len

.if verbose_wifi_firmware AND 01
     ldr  r1,=sdio_xfer_buf
     mov  r2,10h
    @@lop:
     ldrb r0,[r1],1
     bl   wrhex8bit
     subs r2,1
     bne  @@lop
    ;;; bl   wrcrlf
.endif

@@done:
 pop  r4,pc
;---
@@timeout:
 .if verbose_wifi_firmware
   bl   wrdot
 .endif
 b    @@done
;------------------
sdio_send_mbox_block:   ;in: r0=src
 push r4,lr
 ldrh r4,[r0,2]         ;len            ;\get len
 add  r4,6              ;len+6          ;/
 ldr  r1,=sdio_xfer_buf ;dst            ;\
 mov  r2,r4             ;len            ;
 cmp   r0,r1              ;\omit/skip   ;
 addeq r0,r2 ;skip.src    ; copy if     ; copy to xfer buf
 addeq r1,r2 ;skip.dst    ; src=len     ;
 moveq r2,0  ;expire.len  ;/(for data)  ;
 blne memcopy_bytewise                  ;/

;XXX try to make below zerofill optional, via with_gimmicks or so
 mov  r0,r1  ;dst (increased above)     ;\zeropad xfer buf to 80h-byte boundary
 rsb  r1,r4,0          ;0-len           ; (not needed, could also send garbage)
 and  r1,007fh         ;0..7Fh          ;
 bl   zerofill_bytewise                 ;/

 add  r4,7fh                            ;\round-up len
 bic  r4,7fh                            ;/
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
 ldr  r1,=18001000h     ;dst (mbox/blk) ; send mbox block
 sub  r1,r4  ;dst-len                   ;
 mov  r2,r4,lsr 7       ;len/80h (blk's);
 bl   sdio_cmd53_write                  ;/
 pop  r4,pc
;------------------
sdio_read_intern_word:
 push r1-r12,lr
 mov  r8,r1                                             ;-addr
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\              ;\
 ldr  r1,=1000047ch+1   ;dst + func1    ;               ;
 mov  r2,3              ;len            ; (bit8-31)     ;
 mov  r3,r8,lsr 8       ;upper 24bit    ;               ; send WINDOW_READ_ADDR
 str  r3,[r0]           ;[src]=data     ;               ;
 bl   sdio_cmd53_write  ;--> write      ;/              ;
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\              ;
 ldr  r1,=1000047ch+0   ;dst + func1    ;               ;
 mov  r2,1              ;len            ; (bit0-7)      ;
 and  r3,r8,0ffh        ;lower 8bit     ; (LSB last!)   ;
 str  r3,[r0]           ;[src]=data     ;               ;
 bl   sdio_cmd53_write  ;--> write      ;/              ;/
 ldr  r1,=0474h                                         ;\read WINDOW_DATA
 bl   sdio_read_func1word  ;in: r1=addr, out: r0=data   ;/
 pop  r1-r12,pc
;---
sdio_write_intern_word:
 push r0-r12,lr
 mov  r8,r1             ;-addr
 ldr  r1,=0474h         ;dst                            ;\
;mov  r0,r0             ;data                           ; WINDOW_DATA (32bit)
 bl   sdio_write_func1word                              ;/
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\              ;\
 ldr  r1,=10000478h+1   ;dst + func1    ;               ;
 mov  r2,3              ;len            ; (bit8-31)     ;
 mov  r3,r8,lsr 8       ;upper 24bit    ;               ;
 str  r3,[r0]           ;[src]=data     ;               ; WINDOW_WRITE_ADDR
 bl   sdio_cmd53_write  ;--> write      ;/              ;
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\              ;
 ldr  r1,=10000478h+0   ;dst + func1    ;               ;
 mov  r2,1              ;len            ; (bit0-7)      ;
 and  r3,r8,0ffh        ;lower 8bit     ; (LSB last!)   ;
 str  r3,[r0]           ;[src]=data     ;               ;
 bl   sdio_cmd53_write  ;--> write      ;/              ;/
 pop  r0-r12,pc
;------------------
.if with_wifi_firmware_loading
  sdio_search_chip_version:
   push r4,lr
   ldr  r4,=twlcfg_etc_buf+1E0h                   ;\wifi board version
   ldrb r4,[r4]                                   ;/(from WifiFlash[1FDh]
   ldr  r3,=sdio_firmware_buf                     ;-
   ldrb r2,[r3,0a2h]      ;num.parts              ;\
   add  r1,r3,0a4h        ;parts.list             ;
  @@part_lop:                                     ;
   ldr  r0,[r1,08h]  ;ID  ;parts.list[8]          ; search part with
   cmp  r0,r4        ;ID  ;WifiFlash[1FDh]        ; matching ID
   beq  @@found                                   ;
   add  r1,20h            ;parts.list             ;
   subs r2,1              ;num.parts              ;
   bne  @@part_lop                                ;/
   ldr  r1,=txt_error_wifi_firmware_not_found     ;\
   b    error_wrstr_r1                            ;/
  ;---
  @@found:
   ldr  r1,[r1,00h] ;addr ;parts.list[0]  ;\
   add  r1,r3       ;addr ;firmware_buf   ;
   ldr  r3,=sdio_firmware_part_base       ;
   str  r1,[r3]                           ;/

      ;XXX get/check chip_id
      ;XXX get/check rom_version

   ldrb r2,[r1,01h] ;num.chip.id's        ;\
   ldrh r3,[r1,02h] ;offs.to.chip.id's    ;
   add  r3,r3,r2,lsl 3 ;offs+num*8        ;
   add  r3,4           ;offs+num*8+4      ; get RAM vars/base/size
   add  r0,r1,r3  ;part+offs+num*8+4 ;src ;
   ldr  r1,=twlcfg_etc_buf+1E4h      ;dst ;
   mov  r2,0ch                       ;len ;
   bl   memcopy_bytewise                  ;/
   ldr  r0,=0FFFFh   ;initial             ;\
   ldr  r1,=twlcfg_etc_buf+1E4h ;addr     ;
   mov  r2,0ch       ;len                 ;
   swi  swi_crc16 shl 16                  ;
   ldr  r1,=twlcfg_etc_buf+1E0h ;addr     ; adjust CRC16
   strh r0,[r1,02h]  ;[20005E2h]=crc      ; and some unknown/zero bytes
   mov  r0,0                              ;
   strb r0,[r1,01h]  ;[20005E1h]=0        ;
   str  r0,[r1,10h]  ;[20005F0h]=0        ;
   str  r0,[r1,14h]  ;[20005F4h]=0        ;
   str  r0,[r1,18h]  ;[20005F8h]=0        ;
   str  r0,[r1,1ch]  ;[20005FCh]=0        ;/
   pop  r4,pc
.endif
;------------------
sdio_vars:      ;aka host_interest_area
 ldr  r1,=twlcfg_etc_buf+1E4h
 ldr  r1,[r1]   ;get addr of host_interest_area
 bx   lr
;------------------
sdio_get_firmware_part:  ;in: r0=0..3
 ldr  r3,=sdio_firmware_part_base
 ldr  r3,[r3]   ;eg. "sdio_firmware_buf+100h" for part1
 add  r1,r3,4         ;subpart 0
 add  r0,r1,r0,lsl 4  ;subpart 0..3
;ldr  xx,[r0,08h]  ;flags
 ldr  r2,[r0,04h]  ;len
 ldr  r1,[r0,0ch]  ;dst addr (in atheros memory)
 ldr  r0,[r0,00h]  ;src offset (in file part)
 add  r0,r3        ;src offset (in memory)
 bx   lr
;------------------
sdio_read_mbox0word:  ;out: r0=data
 ldr  r1,=0ffch
;- - - - - --------
sdio_read_func1word:  ;in: r1=addr, out: r0=data
 push lr
 ldr  r0,=sdio_xfer_buf     ;dst (temp buf)
 orr  r1,1 shl 28  ;func1   ;src + func1
 mov  r2,4                  ;len
 bl   sdio_cmd53_read    ;in: r0=sdio_xfer_buf=dst, r1=src, r2=len
 ldr  r0,=sdio_xfer_buf     ;dst (temp buf)
 ldr  r0,[r0]               ;data[dst]
 pop  pc
;------------------
sdio_read_func1byte:  ;in: r1=addr, out: r0=data
 push lr
 ldr  r0,=sdio_xfer_buf     ;dst (temp buf)
 orr  r1,1 shl 28  ;func1   ;src + func1
 mov  r2,1                  ;len
 bl   sdio_cmd53_read    ;in: r0=sdio_xfer_buf=dst, r1=src, r2=len
 ldr  r0,=sdio_xfer_buf     ;dst (temp buf)
 ldrb r0,[r0]               ;data[dst]
 pop  pc
;------------------
sdio_write_mbox0word:  ;in: r0=data
 ldr  r1,=0ffch
;- - - - - --------
sdio_write_func1word:  ;in: r0=data, r1=addr
 mov  r3,r0                 ;data
 ldr  r0,=sdio_xfer_buf     ;src (temp buf)
 orr  r1,1 shl 28  ;func1   ;dst + func1
 mov  r2,4                  ;len
 str  r3,[r0]               ;[src]=data
 b    sdio_cmd53_write   ;in: r0=sdio_xfer_buf=src, r1=dst, r2=len
;------------------
sdio_bmi_wait_count4:
 push lr
@@wait_count4_lop:                      ;\
 mov  r1,450h                           ;
 bl   sdio_read_func1byte               ; wait for COUNT[4] nonzero
 cmp  r0,00h                            ;
 beq  @@wait_count4_lop                 ;/
 pop  pc
;------------------
sdio_bmi_1_done:
 push lr
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 mov  r0,01h                            ;\send BMI command done, launch firmware
 bl   sdio_write_mbox0word              ;/
 pop  pc
;------------------
sdio_bmi_2_read_memory:  ;in: r0=src(sdio), r1=dst(arm), r2=len
 push r4-r7,lr
 mov  r4,r0        ;src
 mov  r5,r1        ;dst
 mov  r6,r2        ;remain
@@fragment_lop:
 mov   r7,r6  ;len=remain               ;\
 cmp   r7,80h ;max mbox size (only 80h?); compute fragment size
 movhi r7,80h                           ;/
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
 ldr  r1,=10001000h-0ch ;dst (mbox)     ;
 mov  r2,0ch            ;len            ;
 mov  r3,02h  ;cmd                      ; send cmd+addr+len
 str  r3,[r0,00h]  ;cmd                 ;
 str  r4,[r0,04h]  ;addr                ;
 str  r7,[r0,08h]  ;len                 ;
 bl   sdio_cmd53_write                  ;/
 mov  r2,r7             ;len            ;\
 bl   sdio_cmd53_read_mbox_to_xfer_buf  ;/
 ldr  r0,=sdio_xfer_buf         ;src    ;\
 mov  r0,r5                     ;dst    ; copy data(len) from xfer buf
 mov  r2,r7                     ;len    ;
 bl   memcopy_bytewise                  ;/
 add  r4,r7  ;src                       ;\
 add  r5,r7  ;dst                       ; lop next fragment
 subs r6,r7  ;remain                    ;
 bne  @@fragment_lop                    ;/
 pop  r4-r7,pc
;------------------
sdio_cmd53_read_mbox_to_xfer_buf:  ;in: r2=len
 ldr  r0,=sdio_xfer_buf ;dst (temp buf) ;\
 ldr  r1,=10001000h     ;src (mbox)     ;
 sub  r1,r2             ;mbox-len       ;
;mov  r2,r2             ;len            ;
 b    sdio_cmd53_read                   ;/
;------------------
sdio_bmi_3_write_memory:  ;in: r0=src(arm), r1=dst(sdio), r2=len
 push r4-r7,lr
 mov  r4,r0        ;src
 mov  r5,r1        ;dst
 mov  r6,r2        ;remain
@@fragment_lop:
 mov   r7,r6  ;len=remain               ;\
 cmp   r7,200h-0ch ;max mbox size       ; compute fragment size
 movhi r7,200h-0ch                      ;/
 mov  r0,r4                     ;src    ;\
 ldr  r1,=sdio_xfer_buf+0ch     ;dst    ; copy data(len) to xfer buf
 mov  r2,r7                     ;len    ;
 bl   memcopy_bytewise                  ;/
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
 ldr  r1,=10001000h     ;dst (mbox)     ;
 add  r2,r7,0ch         ;len            ;
 sub  r1,r2             ;mbox-len       ;
 mov  r3,03h  ;cmd                      ; send cmd+addr+len+data(len)
 str  r3,[r0,00h]  ;cmd                 ;
 str  r5,[r0,04h]  ;addr                ;
 str  r7,[r0,08h]  ;len                 ;
 bl   sdio_cmd53_write                  ;/
 add  r4,r7  ;src                       ;\
 add  r5,r7  ;dst                       ; lop next fragment
 subs r6,r7  ;remain                    ;
 bne  @@fragment_lop                    ;/
 pop  r4-r7,pc
;------------------
.if with_wifi_firmware_loading
  sdio_bmi_4_execute:
   push r4-r5,lr
   mov  r4,r0        ;entrypoint
   mov  r5,r1        ;argument
   bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
   ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
   ldr  r1,=10001000h-0ch ;dst (mbox)     ;
   mov  r2,0ch            ;len            ;
   mov  r3,04h  ;cmd                      ; send cmd+entry+arg
   str  r3,[r0,00h]  ;cmd                 ;
   str  r4,[r0,04h]  ;entrypoint          ;
   str  r5,[r0,08h]  ;argument            ;
   bl   sdio_cmd53_write                  ;/
   bl   sdio_read_mbox0word               ;-recv return value
   pop  r4-r5,pc
.endif
;------------------
sdio_bmi_6_read_register:
 push r4-r5,lr
 mov  r4,r0        ;addr
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
 ldr  r1,=10001000h-08h ;dst (mbox)     ;
 mov  r2,08h            ;len            ;
 mov  r3,06h  ;cmd                      ; send cmd+addr
 str  r3,[r0,00h]  ;cmd                 ;
 str  r4,[r0,04h]  ;addr                ;
 bl   sdio_cmd53_write                  ;/
 bl   sdio_read_mbox0word               ;-recv data
 pop  r4-r5,pc
;------------------
sdio_bmi_7_write_register:
 push r4-r5,lr
 mov  r4,r0        ;addr
 mov  r5,r1        ;data
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
 ldr  r1,=10001000h-0ch ;dst (mbox)     ;
 mov  r2,0ch            ;len            ;
 mov  r3,07h  ;cmd                      ; send cmd+addr+data
 str  r3,[r0,00h]  ;cmd                 ;
 str  r4,[r0,04h]  ;addr                ;
 str  r5,[r0,08h]  ;data                ;
 bl   sdio_cmd53_write                  ;/
 pop  r4-r5,pc
;------------------
sdio_bmi_8_get_version:
 push r4,lr
 bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
 mov  r0,08h                            ;\send BMI command get_version
 bl   sdio_write_mbox0word              ;/
 bl   sdio_read_mbox0word               ;\get rom version
 cmp  r0,0ffffffffh                     ; (or FFFFFFFFh=extended)
 bne  @@this_rom_version  ;r0=ver       ;/
;- - -
 bl   sdio_read_mbox0word               ;\get len of extended data
 sub  r2,r0,4   ;len=total-4            ; and read remaining extended data
 bl   sdio_cmd53_read_mbox_to_xfer_buf  ;/
 ldr  r0,=sdio_xfer_buf                 ;\get rom version
 ldr  r0,[r0]   ;1st word = rom version ;/
@@this_rom_version:
 pop  r4,pc
;------------------
.if with_wifi_firmware_loading
  sdio_bmi_D_lz_start:
   push r4,lr
   mov  r4,r0        ;dst
   bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
   ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
   ldr  r1,=10001000h-08h ;dst (mbox)     ;
   mov  r2,08h            ;len            ;
   mov  r3,0dh  ;cmd                      ; send cmd+addr
   str  r3,[r0,00h]  ;cmd                 ;
   str  r4,[r0,04h]  ;addr                ;
   bl   sdio_cmd53_write                  ;/
   pop  r4,pc
.endif
;------------------
.if with_wifi_firmware_loading
  sdio_bmi_E_lz_data:  ;in: r0=src(arm), r2=len
   push r4-r7,lr
   mov  r4,r0        ;src
   mov  r6,r2        ;remain
  @@fragment_lop:
   mov   r7,r6  ;len=remain               ;\
   cmp   r7,200h-08h ;max mbox size       ; compute fragment size
   movhi r7,200h-08h                      ;/
   mov  r0,r4                     ;src    ;\
   ldr  r1,=sdio_xfer_buf+08h     ;dst    ; copy data(len) to xfer buf
   mov  r2,r7                     ;len    ;
   bl   memcopy_bytewise                  ;/
   bl   sdio_bmi_wait_count4              ;-wait for COUNT[4] nonzero
   ldr  r0,=sdio_xfer_buf ;src (temp buf) ;\
   ldr  r1,=10001000h     ;dst (mbox)     ;
   add  r2,r7,08h         ;len            ;
   sub  r1,r2             ;mbox-len       ;
   mov  r3,0eh  ;cmd                      ; send cmd+addr+len+data(len)
   str  r3,[r0,00h]  ;cmd                 ;
   str  r7,[r0,04h]  ;len                 ;
   bl   sdio_cmd53_write                  ;/
   add  r4,r7  ;src                       ;\
   subs r6,r7  ;remain                    ; lop next fragment
   bne  @@fragment_lop                    ;/
   pop  r4-r7,pc
.endif
;------------------
.if with_wifi_firmware_loading
 .if with_manual_wifi_decompress
  manual_lz_decode:
   push r4-r9,lr
         ;bl show_timer
   mov  r7,r1     ;dst    ;-memorize dst.start
   mov  r1,sdio_lz_buf ;dst
   add  r8,r0,r2  ;end    ;-calc end (src+len)
   ldrb r9,[r0],1 ;src    ;-fetch tag
  @@decompress_lop:       ;\
   ldrb r3,[r0],1 ;src    ;
   cmp  r3,r9     ;tag    ;
   beq  @@tag             ; decompress
  @@store_r3:             ;
   strb r3,[r1],1 ;dst    ;
  @@decompress_next:      ;
   cmp  r0,r8     ;end    ;
   bne  @@decompress_lop  ;/
  ;- - -
         ;bl show_timer
          ;W015: 266ms
          ;W024: 36ms
   mov  r0,sdio_lz_buf ;src       ;\
   mov  r2,r1          ;dst.end   ;
   sub  r2,r0          ;len       ; upload
   mov  r1,r7          ;dst       ;
   bl   sdio_bmi_3_write_memory   ;/
         ;bl show_timer
          ;W015: 528ms ... for 26E75h bytes?
          ;W024: 52ms  ... for 533Bh bytes?
   pop  r4-r9,pc
  ;---
  @@tag:
   bl   @@fetch_r3        ;\
   movs r2,r3     ;len    ; fetch len
   mov  r3,r9     ;tag    ; if zero: store tag
   beq  @@store_r3        ;/
   bl   @@fetch_r3        ;\fetch disp
   sub  r4,r1,r3  ;src'   ;/and calc src'=dst-disp
  @@copy_lop:             ;\
   ldrb r3,[r4],1 ;src'   ;
   strb r3,[r1],1 ;dst    ; copy from dst-disp to dst
   subs r2,1      ;len    ;
   bne  @@copy_lop        ;/
   b    @@decompress_next
  ;---
  @@fetch_r3:
   mov  r3,0    ;initial sum
  @@fetch_r3_lop:
   ldrb r4,[r0],1
   tst  r4,80h   ;0=endflag
   bic  r4,80h
   orr  r3,r4,r3,lsl 7
   bne  @@fetch_r3_lop
   bx   lr
 .endif
.endif
;------------------
.if verbose_wifi_firmware
wrstr_and_hex32bit_and_crlf:
 push lr
 bl   wrstr_r1
 bl   wrhex32bit
 mov  r0,attr_orange
 call wrchr_r0
 bl   wrcrlf
 pop  pc
;---
txt_wifi_chip_id        db 'CHIP ID:'        ,attr_white,0
txt_wifi_reset_cause    db 'RESET CAUSE:'    ,attr_white,0
txt_wifi_eeprom_version db 'EEPROM VERSION:' ,attr_white,0
txt_wifi_rom_version    db 'ROM VERSION:'    ,attr_white,0
.align 4
.endif ;verbose_wifi_firmware
;------------------
sdio_read_func0byte:   ;in: r1=addr, out: r0=data
 push r1-r12,lr
 bl   sdio_read_register_r1        ;in: r1=addr(bit0-16)+func(bit28-30)
 pop  r1-r12,pc
;---
sdio_write_func0byte:  ;in: r0=data, r1=addr
 push r0-r12,lr
 bl   sdio_write_r0_to_register_r1 ;in: r0=data(8bit), r1=addr(bit0-16)+func(bit28-30)
 pop  r0-r12,pc
;------------------
sdio_read_register_r1:   ;in: r1=addr(bit0-16)+func(bit28-30)
 push r1-r2,lr
;;;@@param equ (04000100h + (@@func shl 28))
 ;---part3b
 mov  r0,r1,lsl 9     ;data(NONE), addr(bit9-25)        ;\
 and  r2,r1,(7 shl 28);func(bit28-30)                   ; param
 orr  r0,r0,r2        ;func(bit28-30)                   ;/
 ldr  r1,=0434h    ;single-byte CMD52                   ;-cmd
 b    sdio_access_register_core_inj
;------------------
sdio_write_r0_to_register_r1: ;in: r0=data(8bit), r1=addr(bit0-16)+func(bit28-30)
 push r1-r2,lr
 ;---part3b
 orr  r0,r0,r1,lsl 9  ;data(bit0-7), addr(bit9-25)      ;\
 and  r2,r1,(7 shl 28);func(bit28-30)                   ; param
 orr  r0,r0,r2        ;func(bit28-30)                   ;
 orr  r0,1 shl 31     ;writeflag(bit31)                 ;/
 ldr  r1,=0434h    ;single-byte CMD52                   ;-cmd
 b    sdio_access_register_core_inj
;------------------
sdio_cmd3:  ;in: r0=param(32bit)    ;GET_RELATIVE_ADDR
 push r1-r2,lr
 ldr  r1,=0403h    ;single-byte CMD3                    ;-cmd
 b    sdio_access_register_core_inj
;------------------
sdio_cmd5:  ;in: r0=param(32bit)    ;SDIO_SEND_OP_COND
 push r1-r2,lr
 ldr  r1,=0705h    ;single-byte CMD5                    ;-cmd
 b    sdio_access_register_core_inj
;------------------
sdio_cmd7:  ;in: r0=param(32bit)    ;SELECT_DESELECT_CARD
 push r1-r2,lr
 ldr  r1,=0507h    ;single-byte CMD7                    ;-cmd
 b    sdio_access_register_core_inj
;------------------
sdio_access_register_core_inj:  ;in: r0=param, r1=cmd, out: r0=data (if reading)
 ldr  r9,=REGBASE_SDIO
 str  r0,[r9,REG_SDIO_CMD_PARAM]        ;-PARAM
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;\SDIO_IRQ_STAT
 bic  r0,83000000h                      ; clear bit31,25,24 (error, txrq, rxrdy)
 bic  r0,007f0000h                      ; clear bit22..16   (error)
 bic  r0,00000005h                      ; clear bit2,0      (dataend,cmdrespend)
 str  r0,[r9,REG_SDIO_IRQ_STAT]         ;/
 ldrh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;\
 bic  r0,1                              ; SDIO_STOP_INTERNAL clear bit0
 strh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;/
 strh r1,[r9,REG_SDIO_CMD]              ;-SDIO_CMD
 ;- - -
@@busy_lop:
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;\
 tst  r0,7f0000h ;ERR                   ;
 bne  @@error                           ; wait busy
 tst  r0,1       ;CMDRESPEND            ;
 beq  @@busy_lop                        ;/
 ldrh r0,[r9,REG_SDIO_IRQ_STAT]         ;\
 tst  r0,1 shl 22    ;bit22, CMDTIMEOUT ; is that really needed here?
 bne  @@error_hw_timeout                ;/
 ldr  r0,[r9,REG_SDIO_REPLY]    ;\SDIO_REPLY (00001000h, ie. state = "dis"; if it's "CSR")
 and  r0,00ffh                  ;/
@@done:
 pop  r1-r2,pc
;---
@@error:
@@error_hw_timeout:
 .if verbose_wifi_firmware
   bl   wrdot
 .endif
 mov  r0,-1
 b    @@done
;------------------
sdio_cmd53_read:   ;in: r0=dst(mem), r1=src(io), r2=len
 push r4-r12,lr
 mov  r11,r0   ;dst
 mov  r12,r2   ;len

 mov  r4,r1,lsl 9     ;move addr to bit9-25     ;\
 and  r1,(7 shl 28)+(1 shl 27) ;isolate func(bit28-30)+blockmode(bit27)
 orr  r4,r4,r1        ;merge addr+func          ;
 orr  r4,1 shl 26     ;incrementing.addr(bit26) ;
;orr  r4,0 shl 31     ;writeflag(bit31)=0       ;
 bic  r3,r2,200h      ;crop len=200h to 000h    ;
 orr  r4,r3           ;merge len (bit0-8)       ;/

 b    sdio_cmd53_access_inj
;------------------
sdio_cmd53_write:   ;in: r0=src(mem), r1=dst(io), r2=len
 push r4-r12,lr
 mov  r11,r0   ;src
 mov  r12,r2   ;len

 mov  r4,r1,lsl 9     ;move addr to bit9-25     ;\
 and  r1,(7 shl 28)+(1 shl 27) ;isolate func(bit28-30)+blockmode(bit27)
 orr  r4,r4,r1        ;merge addr+func          ;
 orr  r4,1 shl 26     ;incrementing.addr(bit26) ;
 orr  r4,1 shl 31     ;writeflag(bit31)         ;
 bic  r3,r2,200h      ;crop len=200h to 000h    ;
 orr  r4,r3           ;merge len (bit0-8)       ;/

 b    sdio_cmd53_access_inj
;------------------
sdio_cmd53_access_inj:
 ldr  r9,=REGBASE_SDIO
 str  r4,[r9,REG_SDIO_CMD_PARAM]        ;-param
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;\SDIO_IRQ_STAT
 bic  r0,83000000h                      ; clear bit31,25,24 (error, txrq, rxrdy)
 bic  r0,007f0000h                      ; clear bit22..16   (error)
 bic  r0,00000005h                      ; clear bit2,0      (dataend,cmdrespend)
 str  r0,[r9,REG_SDIO_IRQ_STAT]         ;/
 ldrh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;\
 bic  r0,1                              ; SDIO_STOP_INTERNAL clear bit0
 strh r0,[r9,REG_SDIO_STOP_INTERNAL]    ;/
 ;- - -
 tst  r4,1 shl 27  ;block mode          ;\
 moveq r0,r2   ;blklen                  ;
 moveq r1,1    ;numblk                  ;
 movne r0,80h  ;blklen                  ;
 movne r1,r2   ;numblk                  ;
 movne r12,r12,lsl 7 ;len               ;
 strh r0,[r9,REG_SDIO_BLKLEN16]         ;
 strh r1,[r9,REG_SDIO_NUMBLK16]         ;
.if try_sdio_data32_mode                ;
 str  r0,[r9,REG_SDIO_BLKLEN32]         ;   ;\this DISTURBS hardware
 str  r1,[r9,REG_SDIO_NUMBLK32]         ;   ;/(even when in DATA16 mode?!)
.endif                                  ;/

        .if try_sdio_ndma
                tst  r4,1 shl 27  ;block mode
                beq  @@use_data16
               ;- - -
                str  r0,[r9,REG_SDIO_BLKLEN32]         ;\this DISTURBS hardware
                str  r1,[r9,REG_SDIO_NUMBLK32]         ;/(even when in DATA16 mode?!)
                mov  r0,002h                           ;\want DATA32 mode, step 1
                strh r0,[r9,REG_SDIO_DATA_CTL]         ;/
                ldr  r0,=402h ;clear fifo, data32 mode ;\want DATA32 mode, step 2
                str  r0,[r9,REG_SDIO_IRQ32]            ;/
                ldr  r3,=REGBASE_NDMA+0*1Ch
                tst  r4,1 shl 31 ;param.writeflag
                add  r0,r9,REG_SDIO_DATA32
                streq r0,[r3,04h]  ;NDMAxSAD ;\read
                streq r11,[r3,08h] ;NDMAxDAD ;/
                strne r11,[r3,04h] ;NDMAxSAD ;\write
                strne r0,[r3,08h]  ;NDMAxDAD ;/
                mov  r0,r12,lsr 2      ;total words
                str  r0,[r3,0ch]  ;NDMAxTNCT
                mov  r0,80h/4          ;words per logical block
                str  r0,[r3,10h]  ;NDMAxWCNT
                mov  r0,0
                str  r0,[r3,14h]  ;NDMAxBCNT
                ldreq r0,=(2 shl 13)+(5 shl 16)+(9 shl 24)+(0 shl 29)+(1 shl 31)  ;read
                ldrne r0,=(2 shl 10)+(5 shl 16)+(9 shl 24)+(0 shl 29)+(1 shl 31)  ;write
                str  r0,[r3,1ch]  ;NDMAxCNT
                b    @@use_this
               ;---
               @@use_data16:
                mov  r0,000h                           ;\want DATA16 mode, step 1
                strh r0,[r9,REG_SDIO_DATA_CTL]         ;/
                ldr  r0,=400h ;clear fifo, data32 mode ;\want DATA16 mode, step 2
                str  r0,[r9,REG_SDIO_IRQ32]            ;/
               @@use_this:
        .endif

 ;- - -
 tst  r4,1 shl 31 ;param.writeflag      ;\
 ldrne r0,=4c35h ;cmd.wr   ;\           ; send command
 ldreq r0,=5c35h ;cmd.rd   ; SDIO_CMD   ;
        tst  r4,1 shl 27 ;block mode
        beq @@no_multi
        cmp r1,1  ;NUMBLK
        orrne r0,2000h ;multiblock   ;XXX or is that used for NDMA with FIFO32?
       @@no_multi:
 strh r0,[r9,REG_SDIO_CMD] ;/           ;/
@@busy_lop:                             ;\
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;
 tst  r0,7f0000h ;ERR                   ; wait busy
 bne  @@error                           ;
 tst  r0,1       ;CMDRESPEND            ;
 beq  @@busy_lop                        ;/
 ;- - -
 ldrh r0,[r9,REG_SDIO_IRQ_STAT]         ;\
 tst  r0,1 shl 22    ;bit22, CMDTIMEOUT ; is that really needed here?
 bne  @@error_hw_timeout                ;/
;;; ldr  r0,[r9,REG_SDIO_REPLY] ;\SDIO_REPLY (00001000h, ie. state = "dis"; if it's "CSR")
;;; and  r0,00ffh               ;/

.if try_sdio_data32_mode        OR try_sdio_ndma
 ldrh r0,[r9,REG_SDIO_DATA_CTL]         ;\
 tst  r0,2                              ;
 beq  @@dta16                           ; redirect data16 / data32
 ldr  r0,[r9,REG_SDIO_IRQ32]            ;
 tst  r0,2                              ;
 beq  @@dta16                           ;/
;- - -
@@dta32:  ;---DATA32...
 ldr  r1,=REGBASE_NDMA+0*1Ch            ;\
@@dta32_wait_ndma_done:                 ;
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;
 tst  r0,7f0000h ;ERR                   ; wait for data NDMA done
 bne  @@error                           ; (for both NDMA read or write)
 ldr  r0,[r1,1ch]  ;NDMAxCNT            ;
 tst  r0,1 shl 31                       ;
 bne  @@dta32_wait_ndma_done            ;/
 b    @@finish
.endif

;---
@@dta16:
 tst  r4,1 shl 31 ;param.writeflag      ;\check if read or write
 bne  @@dta16_write                     ;/
@@dta16_wait_rxrdy:             ;\              ;\
 ldr  r0,[r9,REG_SDIO_IRQ_STAT] ;
 tst  r0,7f0000h ;ERR           ; wait for data ;
 bne  @@error                   ;               ;
 tst  r0,1000000h  ;RXRDY16     ;               ; read
 beq  @@dta16_wait_rxrdy        ;/              ;
 .if sdio_dma
   add  r12,1 ;round-up
   mov  r12,r12,lsr 1  ;halfword count
   orr  r12,81000000h ;src=fix, 16bit, start
   mov  r3,REGBASE_IO
   add  r0,r9,REG_SDIO_DATA16
   str  r0,[r3,REG_DMA3_SAD] ;SAD
   str  r11,[r3,REG_DMA3_DAD] ;DAD
   str  r12,[r3,REG_DMA3_CNT] ;CNT
 .else
  @@dta16_rx_lop:                 ;\              ;
   ldrh r0,[r9,REG_SDIO_DATA16]   ;               ;
   strh r0,[r11],2                ; read data     ;
   subs r12,2                     ;               ;
   bhi  @@dta16_rx_lop            ;/              ;/
 .endif
 b    @@finish
;---
@@dta16_write:
@@dta16_wait_txrq:              ;\              ;\
 ldr  r0,[r9,REG_SDIO_IRQ_STAT] ;
 tst  r0,7f0000h ;ERR           ; wait          ;
 bne  @@error                   ;               ;
 tst  r0,2000000h  ;TXRQ        ;               ; write
 beq  @@dta16_wait_txrq         ;/              ;
 .if sdio_dma
   add  r12,1 ;round-up
   mov  r12,r12,lsr 1  ;halfword count
   orr  r12,00400000h ;dst=fix, 16bit
   orr  r12,80000000h ;start
   mov  r3,REGBASE_IO
   str  r11,[r3,REG_DMA3_SAD] ;SAD
   add  r0,r9,REG_SDIO_DATA16
   str  r0,[r3,REG_DMA3_DAD] ;DAD
   str  r12,[r3,REG_DMA3_CNT] ;CNT
 .else
  @@dta16_tx_lop:                 ;\              ;
   ldrh r0,[r11],2                ;               ;
   strh r0,[r9,REG_SDIO_DATA16]   ; write data    ;
   subs r12,2                     ;               ;
   bhi  @@dta16_tx_lop            ;/              ;/
 .endif
 b    @@finish
;---
@@finish:
@@wait_dataend:                         ;\
 ldr  r0,[r9,REG_SDIO_IRQ_STAT]         ;
 tst  r0,7f0000h ;ERR                   ; wait data end
 bne  @@error                           ; (works BETTER with this!)
 tst  r0,4     ;DATAEND                 ;
 beq  @@wait_dataend                    ;/
;- - -
@@done:
 pop  r4-r12,pc
;---
@@error:
@@error_hw_timeout:
 .if verbose_wifi_firmware
   bl   wrdot
 .endif
 mov  r0,-1
 b    @@done
